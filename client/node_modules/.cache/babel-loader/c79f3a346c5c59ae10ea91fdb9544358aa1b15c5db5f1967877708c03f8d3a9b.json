{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya\\\\Blockchain-Based-Decentralized-Cloud-Storage-System\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\n/*import { useState } from \"react\";\r\nimport \"./Display.css\";\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n        \r\n      } else {\r\n        dataArray = await contract.display(account);\r\n        console.log(dataArray);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n    }\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      // console.log(str);\r\n      // console.log(str_array);\r\n      const images = str_array.map((item, i) => {\r\n        return (\r\n          <a href={item} key={i} target=\"_blank\">\r\n            <img\r\n              key={i}\r\n              src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n              alt=\"new\"\r\n              className=\"image-list\"\r\n            ></img>\r\n          </a>\r\n        );\r\n      });\r\n      setData(images);\r\n    } else {\r\n      alert(\"No image to display\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"image-list\">{data}</div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      ></input>\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport default Display;*/\n\nimport { useState } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = _ref => {\n  _s();\n  let {\n    contract,\n    account\n  } = _ref;\n  const [data, setData] = useState(\"\"); // State to store file data\n\n  // Function to fetch data from the contract\n  const getdata = async () => {\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n      } else {\n        dataArray = await contract.display(account);\n        console.log(dataArray);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n      return;\n    }\n    const isEmpty = Object.keys(dataArray).length === 0;\n    if (!isEmpty) {\n      const str = dataArray.toString();\n      const str_array = str.split(\",\");\n      console.log(str_array);\n\n      // Map over the array to create file cards\n      const files = str_array.map((item, i) => {\n        const fileHash = item.substring(6); // Extract the file hash\n        const fileName = `File-${i + 1}`; // Assign a dynamic file name or fetch it from metadata if available\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://gateway.pinata.cloud/ipfs/${fileHash}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"file-link\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://gateway.pinata.cloud/ipfs/${fileHash}`,\n              alt: fileName,\n              className: \"image-thumbnail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-name\",\n            children: fileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n      });\n      setData(files); // Set the file cards to state\n    } else {\n      alert(\"No files to display\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getdata,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Display, \"avaWeDctHFwWP+lC5+N1mkv/uq8=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","Display","contract","account","data","setData","getdata","dataArray","Otheraddress","document","querySelector","value","display","console","log","e","alert","isEmpty","Object","keys","length","str","toString","str_array","split","files","map","item","i","fileHash","substring","fileName"],"sources":["C:/Users/Aditya/Blockchain-Based-Decentralized-Cloud-Storage-System/client/src/components/Display.js"],"sourcesContent":["/*import { useState } from \"react\";\r\nimport \"./Display.css\";\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n        \r\n      } else {\r\n        dataArray = await contract.display(account);\r\n        console.log(dataArray);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n    }\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      // console.log(str);\r\n      // console.log(str_array);\r\n      const images = str_array.map((item, i) => {\r\n        return (\r\n          <a href={item} key={i} target=\"_blank\">\r\n            <img\r\n              key={i}\r\n              src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n              alt=\"new\"\r\n              className=\"image-list\"\r\n            ></img>\r\n          </a>\r\n        );\r\n      });\r\n      setData(images);\r\n    } else {\r\n      alert(\"No image to display\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"image-list\">{data}</div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      ></input>\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport default Display;*/\r\n\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\"); // State to store file data\r\n\r\n  // Function to fetch data from the contract\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n        console.log(dataArray);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      return;\r\n    }\r\n\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      console.log(str_array);\r\n\r\n      // Map over the array to create file cards\r\n      const files = str_array.map((item, i) => {\r\n        const fileHash = item.substring(6); // Extract the file hash\r\n        const fileName = `File-${i + 1}`; // Assign a dynamic file name or fetch it from metadata if available\r\n\r\n        return (\r\n          <div key={i} className=\"file-card\">\r\n            <a\r\n              href={`https://gateway.pinata.cloud/ipfs/${fileHash}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"file-link\"\r\n            >\r\n              <img\r\n                src={`https://gateway.pinata.cloud/ipfs/${fileHash}`}\r\n                alt={fileName}\r\n                className=\"image-thumbnail\"\r\n              />\r\n            </a>\r\n            <p className=\"file-name\">{fileName}</p>\r\n          </div>\r\n        );\r\n      });\r\n      setData(files); // Set the file cards to state\r\n    } else {\r\n      alert(\"No files to display\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"display-container\">\r\n      {/* Render the file cards */}\r\n      <div className=\"image-list\">{data}</div>\r\n\r\n      {/* Input for entering address */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      />\r\n\r\n      {/* Button to fetch data */}\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}