{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya\\\\Blockchain-Based-Decentralized-Cloud-Storage-System\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = _ref => {\n  _s();\n  let {\n    contract,\n    account\n  } = _ref;\n  const [data, setData] = useState([]);\n  const getdata = async () => {\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      // Fetch data from the contract\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n      } else {\n        dataArray = await contract.display(account);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n      return;\n    }\n\n    // Check if the returned data is empty\n    if (dataArray && dataArray.length > 0) {\n      const str = dataArray.toString(); // Convert to string if needed\n      const str_array = str.split(\",\"); // Split into an array\n\n      // Map the array to display images\n      const images = str_array.map((item, i) => {\n        const url = `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`;\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: url,\n            alt: `Image ${i + 1}`,\n            className: \"image-list\",\n            onError: e => e.target.style.display = \"none\" // Hide broken images\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this);\n      });\n      setData(images);\n    } else {\n      alert(\"No image to display\");\n      setData([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: data.length > 0 ? data : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getdata,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","Display","contract","account","data","setData","getdata","dataArray","Otheraddress","document","querySelector","value","display","e","alert","length","str","toString","str_array","split","images","map","item","i","url","substring","target","style"],"sources":["C:/Users/Aditya/Blockchain-Based-Decentralized-Cloud-Storage-System/client/src/components/Display.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n\r\n    try {\r\n      // Fetch data from the contract\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      return;\r\n    }\r\n\r\n    // Check if the returned data is empty\r\n    if (dataArray && dataArray.length > 0) {\r\n      const str = dataArray.toString(); // Convert to string if needed\r\n      const str_array = str.split(\",\"); // Split into an array\r\n\r\n      // Map the array to display images\r\n      const images = str_array.map((item, i) => {\r\n        const url = `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`;\r\n        return (\r\n          <a href={url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img\r\n              src={url}\r\n              alt={`Image ${i + 1}`}\r\n              className=\"image-list\"\r\n              onError={(e) => (e.target.style.display = \"none\")} // Hide broken images\r\n            />\r\n          </a>\r\n        );\r\n      });\r\n      setData(images);\r\n    } else {\r\n      alert(\"No image to display\");\r\n      setData([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"image-container\">\r\n        {data.length > 0 ? data : <p>No images to display</p>}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      ></input>\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,eAAe;AAAC;AAAA;AAEvB,MAAMC,OAAO,GAAG,QAA2B;EAAA;EAAA,IAA1B;IAAEC,QAAQ;IAAEC;EAAQ,CAAC;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMM,OAAO,GAAG,YAAY;IAC1B,IAAIC,SAAS;IACb,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CAACC,KAAK;IAE7D,IAAI;MACF;MACA,IAAIH,YAAY,EAAE;QAChBD,SAAS,GAAG,MAAML,QAAQ,CAACU,OAAO,CAACJ,YAAY,CAAC;MAClD,CAAC,MAAM;QACLD,SAAS,GAAG,MAAML,QAAQ,CAACU,OAAO,CAACT,OAAO,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOU,CAAC,EAAE;MACVC,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;;IAEA;IACA,IAAIP,SAAS,IAAIA,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;MACrC,MAAMC,GAAG,GAAGT,SAAS,CAACU,QAAQ,EAAE,CAAC,CAAC;MAClC,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;MAElC;MACA,MAAMC,MAAM,GAAGF,SAAS,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QACxC,MAAMC,GAAG,GAAI,qCAAoCF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAE,EAAC;QACpE,oBACE;UAAG,IAAI,EAAED,GAAI;UAAS,MAAM,EAAC,QAAQ;UAAC,GAAG,EAAC,qBAAqB;UAAA,uBAC7D;YACE,GAAG,EAAEA,GAAI;YACT,GAAG,EAAG,SAAQD,CAAC,GAAG,CAAE,EAAE;YACtB,SAAS,EAAC,YAAY;YACtB,OAAO,EAAGV,CAAC,IAAMA,CAAC,CAACa,MAAM,CAACC,KAAK,CAACf,OAAO,GAAG,MAAQ,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA;QACnD,GANeW,CAAC;UAAA;UAAA;UAAA;QAAA,QAOhB;MAER,CAAC,CAAC;MACFlB,OAAO,CAACe,MAAM,CAAC;IACjB,CAAC,MAAM;MACLN,KAAK,CAAC,qBAAqB,CAAC;MAC5BT,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;EAED,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,iBAAiB;MAAA,UAC7BD,IAAI,CAACW,MAAM,GAAG,CAAC,GAAGX,IAAI,gBAAG;QAAA,UAAG;MAAoB;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACjD,eACN;MACE,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,eAAe;MAC3B,SAAS,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QACZ,eACT;MAAQ,SAAS,EAAC,eAAe;MAAC,OAAO,EAAEE,OAAQ;MAAA,UAAC;IAEpD;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBACR;AAEP,CAAC;AAAC,GA5DIL,OAAO;AAAA,KAAPA,OAAO;AA8Db,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}